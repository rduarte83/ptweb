CREATE OR REPLACE FUNCTION f_logs() RETURNS trigger AS $$
BEGIN
	IF TG_OP = 'INSERT' THEN 
		INSERT INTO logs (tab, op, new)
		VALUES (TG_RELNAME, TG_OP, row_to_json(NEW));
        RETURN NEW;
	ELSIF   TG_OP = 'UPDATE'THEN 
		INSERT INTO logs (tab, op, new, old)
		VALUES (TG_RELNAME, TG_OP, row_to_json(NEW), row_to_json(OLD));
        RETURN NEW;
    ELSIF   TG_OP = 'DELETE' THEN   
        INSERT INTO logs (tab, op, old) 
        VALUES (TG_RELNAME, TG_OP, row_to_json(OLD));
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE 'plpgsql' SECURITY DEFINER;

-- Query dinamica dos triggers
/*
SELECT 'CREATE TRIGGER ' || tab_name || ' BEFORE INSERT OR UPDATE OR DELETE ON ' || t_name || ' FOR EACH ROW EXECUTE PROCEDURE f_logs();' AS t_logs
FROM (
    SELECT 'logs_'|| table_name AS tab_name, table_name AS t_name
    FROM information_schema.tables 
    WHERE table_schema='public' AND table_name NOT ILIKE 'logs'
    ) tablist;
*/

CREATE TRIGGER logs_role BEFORE INSERT OR UPDATE OR DELETE ON role FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_categoria BEFORE INSERT OR UPDATE OR DELETE ON categoria FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_artigo_categoria BEFORE INSERT OR UPDATE OR DELETE ON artigo_categoria FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_tipo BEFORE INSERT OR UPDATE OR DELETE ON tipo FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_intensidade BEFORE INSERT OR UPDATE OR DELETE ON intensidade FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_zona BEFORE INSERT OR UPDATE OR DELETE ON zona FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_episodio_dor BEFORE INSERT OR UPDATE OR DELETE ON episodio_dor FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_mensagem BEFORE INSERT OR UPDATE OR DELETE ON mensagem FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_utilizador BEFORE INSERT OR UPDATE OR DELETE ON utilizador FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_artigo BEFORE INSERT OR UPDATE OR DELETE ON artigo FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_profissional_saude BEFORE INSERT OR UPDATE OR DELETE ON profissional_saude FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_utente BEFORE INSERT OR UPDATE OR DELETE ON utente FOR EACH ROW EXECUTE PROCEDURE f_logs();
CREATE TRIGGER logs_treino BEFORE INSERT OR UPDATE OR DELETE ON treino FOR EACH ROW EXECUTE PROCEDURE f_logs();
